//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ..\ChessBot\AlgebraicNotation\AlgebraicNotation.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ChessBot.AlgebraicNotation {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class AlgebraicNotationParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KINGSIDE_CASTLE=1, QUEENSIDE_CASTLE=2, FILE=3, RANK=4, KNIGHT=5, BISHOP=6, 
		ROOK=7, QUEEN=8, KING=9, CAPTURE=10, CHECK=11, CHECKMATE=12;
	public const int
		RULE_move = 0, RULE_moveDesc = 1, RULE_ordinaryMoveDesc = 2, RULE_square = 3, 
		RULE_pieceKind = 4, RULE_source = 5, RULE_destination = 6, RULE_promotionKind = 7, 
		RULE_status = 8;
	public static readonly string[] ruleNames = {
		"move", "moveDesc", "ordinaryMoveDesc", "square", "pieceKind", "source", 
		"destination", "promotionKind", "status"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'N'", "'B'", "'R'", "'Q'", "'K'", "'x'", 
		"'+'", "'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KINGSIDE_CASTLE", "QUEENSIDE_CASTLE", "FILE", "RANK", "KNIGHT", 
		"BISHOP", "ROOK", "QUEEN", "KING", "CAPTURE", "CHECK", "CHECKMATE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AlgebraicNotation.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AlgebraicNotationParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AlgebraicNotationParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AlgebraicNotationParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MoveContext : ParserRuleContext {
		public MoveDescContext moveDesc() {
			return GetRuleContext<MoveDescContext>(0);
		}
		public StatusContext status() {
			return GetRuleContext<StatusContext>(0);
		}
		public MoveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_move; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAlgebraicNotationListener typedListener = listener as IAlgebraicNotationListener;
			if (typedListener != null) typedListener.EnterMove(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAlgebraicNotationListener typedListener = listener as IAlgebraicNotationListener;
			if (typedListener != null) typedListener.ExitMove(this);
		}
	}

	[RuleVersion(0)]
	public MoveContext move() {
		MoveContext _localctx = new MoveContext(Context, State);
		EnterRule(_localctx, 0, RULE_move);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; moveDesc();
			State = 20;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHECK || _la==CHECKMATE) {
				{
				State = 19; status();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveDescContext : ParserRuleContext {
		public OrdinaryMoveDescContext ordinaryMoveDesc() {
			return GetRuleContext<OrdinaryMoveDescContext>(0);
		}
		public ITerminalNode KINGSIDE_CASTLE() { return GetToken(AlgebraicNotationParser.KINGSIDE_CASTLE, 0); }
		public ITerminalNode QUEENSIDE_CASTLE() { return GetToken(AlgebraicNotationParser.QUEENSIDE_CASTLE, 0); }
		public MoveDescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveDesc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAlgebraicNotationListener typedListener = listener as IAlgebraicNotationListener;
			if (typedListener != null) typedListener.EnterMoveDesc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAlgebraicNotationListener typedListener = listener as IAlgebraicNotationListener;
			if (typedListener != null) typedListener.ExitMoveDesc(this);
		}
	}

	[RuleVersion(0)]
	public MoveDescContext moveDesc() {
		MoveDescContext _localctx = new MoveDescContext(Context, State);
		EnterRule(_localctx, 2, RULE_moveDesc);
		try {
			State = 25;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FILE:
			case RANK:
			case KNIGHT:
			case BISHOP:
			case ROOK:
			case QUEEN:
			case KING:
			case CAPTURE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 22; ordinaryMoveDesc();
				}
				break;
			case KINGSIDE_CASTLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 23; Match(KINGSIDE_CASTLE);
				}
				break;
			case QUEENSIDE_CASTLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 24; Match(QUEENSIDE_CASTLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrdinaryMoveDescContext : ParserRuleContext {
		public DestinationContext destination() {
			return GetRuleContext<DestinationContext>(0);
		}
		public PieceKindContext pieceKind() {
			return GetRuleContext<PieceKindContext>(0);
		}
		public SourceContext source() {
			return GetRuleContext<SourceContext>(0);
		}
		public ITerminalNode CAPTURE() { return GetToken(AlgebraicNotationParser.CAPTURE, 0); }
		public PromotionKindContext promotionKind() {
			return GetRuleContext<PromotionKindContext>(0);
		}
		public OrdinaryMoveDescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordinaryMoveDesc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAlgebraicNotationListener typedListener = listener as IAlgebraicNotationListener;
			if (typedListener != null) typedListener.EnterOrdinaryMoveDesc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAlgebraicNotationListener typedListener = listener as IAlgebraicNotationListener;
			if (typedListener != null) typedListener.ExitOrdinaryMoveDesc(this);
		}
	}

	[RuleVersion(0)]
	public OrdinaryMoveDescContext ordinaryMoveDesc() {
		OrdinaryMoveDescContext _localctx = new OrdinaryMoveDescContext(Context, State);
		EnterRule(_localctx, 4, RULE_ordinaryMoveDesc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KNIGHT) | (1L << BISHOP) | (1L << ROOK) | (1L << QUEEN) | (1L << KING))) != 0)) {
				{
				State = 27; pieceKind();
				}
			}

			State = 31;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 30; source();
				}
				break;
			}
			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CAPTURE) {
				{
				State = 33; Match(CAPTURE);
				}
			}

			State = 36; destination();
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KNIGHT) | (1L << BISHOP) | (1L << ROOK) | (1L << QUEEN))) != 0)) {
				{
				State = 37; promotionKind();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SquareContext : ParserRuleContext {
		public ITerminalNode FILE() { return GetToken(AlgebraicNotationParser.FILE, 0); }
		public ITerminalNode RANK() { return GetToken(AlgebraicNotationParser.RANK, 0); }
		public SquareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_square; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAlgebraicNotationListener typedListener = listener as IAlgebraicNotationListener;
			if (typedListener != null) typedListener.EnterSquare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAlgebraicNotationListener typedListener = listener as IAlgebraicNotationListener;
			if (typedListener != null) typedListener.ExitSquare(this);
		}
	}

	[RuleVersion(0)]
	public SquareContext square() {
		SquareContext _localctx = new SquareContext(Context, State);
		EnterRule(_localctx, 6, RULE_square);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(FILE);
			State = 41; Match(RANK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PieceKindContext : ParserRuleContext {
		public ITerminalNode KNIGHT() { return GetToken(AlgebraicNotationParser.KNIGHT, 0); }
		public ITerminalNode BISHOP() { return GetToken(AlgebraicNotationParser.BISHOP, 0); }
		public ITerminalNode ROOK() { return GetToken(AlgebraicNotationParser.ROOK, 0); }
		public ITerminalNode QUEEN() { return GetToken(AlgebraicNotationParser.QUEEN, 0); }
		public ITerminalNode KING() { return GetToken(AlgebraicNotationParser.KING, 0); }
		public PieceKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pieceKind; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAlgebraicNotationListener typedListener = listener as IAlgebraicNotationListener;
			if (typedListener != null) typedListener.EnterPieceKind(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAlgebraicNotationListener typedListener = listener as IAlgebraicNotationListener;
			if (typedListener != null) typedListener.ExitPieceKind(this);
		}
	}

	[RuleVersion(0)]
	public PieceKindContext pieceKind() {
		PieceKindContext _localctx = new PieceKindContext(Context, State);
		EnterRule(_localctx, 8, RULE_pieceKind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KNIGHT) | (1L << BISHOP) | (1L << ROOK) | (1L << QUEEN) | (1L << KING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceContext : ParserRuleContext {
		public ITerminalNode FILE() { return GetToken(AlgebraicNotationParser.FILE, 0); }
		public ITerminalNode RANK() { return GetToken(AlgebraicNotationParser.RANK, 0); }
		public SquareContext square() {
			return GetRuleContext<SquareContext>(0);
		}
		public SourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAlgebraicNotationListener typedListener = listener as IAlgebraicNotationListener;
			if (typedListener != null) typedListener.EnterSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAlgebraicNotationListener typedListener = listener as IAlgebraicNotationListener;
			if (typedListener != null) typedListener.ExitSource(this);
		}
	}

	[RuleVersion(0)]
	public SourceContext source() {
		SourceContext _localctx = new SourceContext(Context, State);
		EnterRule(_localctx, 10, RULE_source);
		try {
			State = 48;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 45; Match(FILE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 46; Match(RANK);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 47; square();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestinationContext : ParserRuleContext {
		public SquareContext square() {
			return GetRuleContext<SquareContext>(0);
		}
		public DestinationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destination; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAlgebraicNotationListener typedListener = listener as IAlgebraicNotationListener;
			if (typedListener != null) typedListener.EnterDestination(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAlgebraicNotationListener typedListener = listener as IAlgebraicNotationListener;
			if (typedListener != null) typedListener.ExitDestination(this);
		}
	}

	[RuleVersion(0)]
	public DestinationContext destination() {
		DestinationContext _localctx = new DestinationContext(Context, State);
		EnterRule(_localctx, 12, RULE_destination);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; square();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PromotionKindContext : ParserRuleContext {
		public ITerminalNode KNIGHT() { return GetToken(AlgebraicNotationParser.KNIGHT, 0); }
		public ITerminalNode BISHOP() { return GetToken(AlgebraicNotationParser.BISHOP, 0); }
		public ITerminalNode ROOK() { return GetToken(AlgebraicNotationParser.ROOK, 0); }
		public ITerminalNode QUEEN() { return GetToken(AlgebraicNotationParser.QUEEN, 0); }
		public PromotionKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_promotionKind; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAlgebraicNotationListener typedListener = listener as IAlgebraicNotationListener;
			if (typedListener != null) typedListener.EnterPromotionKind(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAlgebraicNotationListener typedListener = listener as IAlgebraicNotationListener;
			if (typedListener != null) typedListener.ExitPromotionKind(this);
		}
	}

	[RuleVersion(0)]
	public PromotionKindContext promotionKind() {
		PromotionKindContext _localctx = new PromotionKindContext(Context, State);
		EnterRule(_localctx, 14, RULE_promotionKind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KNIGHT) | (1L << BISHOP) | (1L << ROOK) | (1L << QUEEN))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatusContext : ParserRuleContext {
		public ITerminalNode CHECK() { return GetToken(AlgebraicNotationParser.CHECK, 0); }
		public ITerminalNode CHECKMATE() { return GetToken(AlgebraicNotationParser.CHECKMATE, 0); }
		public StatusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_status; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAlgebraicNotationListener typedListener = listener as IAlgebraicNotationListener;
			if (typedListener != null) typedListener.EnterStatus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAlgebraicNotationListener typedListener = listener as IAlgebraicNotationListener;
			if (typedListener != null) typedListener.ExitStatus(this);
		}
	}

	[RuleVersion(0)]
	public StatusContext status() {
		StatusContext _localctx = new StatusContext(Context, State);
		EnterRule(_localctx, 16, RULE_status);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			_la = TokenStream.LA(1);
			if ( !(_la==CHECK || _la==CHECKMATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xE', ';', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\x17', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x1C', '\n', '\x3', '\x3', '\x4', '\x5', 
		'\x4', '\x1F', '\n', '\x4', '\x3', '\x4', '\x5', '\x4', '\"', '\n', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '%', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', ')', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x33', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x2', '\x2', '\v', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x2', '\x5', '\x3', 
		'\x2', '\a', '\v', '\x3', '\x2', '\a', '\n', '\x3', '\x2', '\r', '\xE', 
		'\x2', ':', '\x2', '\x14', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x1E', '\x3', '\x2', '\x2', '\x2', 
		'\b', '*', '\x3', '\x2', '\x2', '\x2', '\n', '-', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x32', '\x3', '\x2', '\x2', '\x2', '\xE', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x36', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x38', '\x3', '\x2', '\x2', '\x2', '\x14', '\x16', '\x5', '\x4', '\x3', 
		'\x2', '\x15', '\x17', '\x5', '\x12', '\n', '\x2', '\x16', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x17', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x18', '\x1C', '\x5', '\x6', '\x4', 
		'\x2', '\x19', '\x1C', '\a', '\x3', '\x2', '\x2', '\x1A', '\x1C', '\a', 
		'\x4', '\x2', '\x2', '\x1B', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1F', '\x5', 
		'\n', '\x6', '\x2', '\x1E', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x1F', '!', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\"', '\x5', '\f', '\a', '\x2', '!', ' ', '\x3', '\x2', '\x2', 
		'\x2', '!', '\"', '\x3', '\x2', '\x2', '\x2', '\"', '$', '\x3', '\x2', 
		'\x2', '\x2', '#', '%', '\a', '\f', '\x2', '\x2', '$', '#', '\x3', '\x2', 
		'\x2', '\x2', '$', '%', '\x3', '\x2', '\x2', '\x2', '%', '&', '\x3', '\x2', 
		'\x2', '\x2', '&', '(', '\x5', '\xE', '\b', '\x2', '\'', ')', '\x5', '\x10', 
		'\t', '\x2', '(', '\'', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x3', '\x2', 
		'\x2', '\x2', ')', '\a', '\x3', '\x2', '\x2', '\x2', '*', '+', '\a', '\x5', 
		'\x2', '\x2', '+', ',', '\a', '\x6', '\x2', '\x2', ',', '\t', '\x3', '\x2', 
		'\x2', '\x2', '-', '.', '\t', '\x2', '\x2', '\x2', '.', '\v', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x33', '\a', '\x5', '\x2', '\x2', '\x30', '\x33', 
		'\a', '\x6', '\x2', '\x2', '\x31', '\x33', '\x5', '\b', '\x5', '\x2', 
		'\x32', '/', '\x3', '\x2', '\x2', '\x2', '\x32', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x5', '\b', '\x5', '\x2', 
		'\x35', '\xF', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\t', '\x3', 
		'\x2', '\x2', '\x37', '\x11', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', 
		'\t', '\x4', '\x2', '\x2', '\x39', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\t', '\x16', '\x1B', '\x1E', '!', '$', '(', '\x32',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace ChessBot.AlgebraicNotation
