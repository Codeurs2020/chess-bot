//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ..\ChessBot\AlgebraicNotation\AlgebraicNotation.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ChessBot.AlgebraicNotation {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class AlgebraicNotationLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KINGSIDE_CASTLE=1, QUEENSIDE_CASTLE=2, FILE=3, RANK=4, KNIGHT=5, BISHOP=6, 
		ROOK=7, QUEEN=8, KING=9, CAPTURE=10, CHECK=11, CHECKMATE=12;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"KINGSIDE_CASTLE", "QUEENSIDE_CASTLE", "FILE", "RANK", "KNIGHT", "BISHOP", 
		"ROOK", "QUEEN", "KING", "CAPTURE", "CHECK", "CHECKMATE"
	};


	public AlgebraicNotationLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AlgebraicNotationLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'N'", "'B'", "'R'", "'Q'", "'K'", "'x'", 
		"'+'", "'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KINGSIDE_CASTLE", "QUEENSIDE_CASTLE", "FILE", "RANK", "KNIGHT", 
		"BISHOP", "ROOK", "QUEEN", "KING", "CAPTURE", "CHECK", "CHECKMATE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AlgebraicNotation.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AlgebraicNotationLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\xE', '\x43', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x5', '\x2', '\"', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '.', '\n', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x2', '\x2', '\xE', '\x3', '\x3', 
		'\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', 
		'\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', 
		'\xE', '\x3', '\x2', '\x2', '\x2', '\x44', '\x2', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x3', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x5', '-', '\x3', '\x2', '\x2', '\x2', '\a', '/', '\x3', '\x2', '\x2', 
		'\x2', '\t', '\x31', '\x3', '\x2', '\x2', '\x2', '\v', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\r', '\x35', '\x3', '\x2', '\x2', '\x2', '\xF', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x11', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x13', ';', '\x3', '\x2', '\x2', '\x2', '\x15', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x17', '?', '\x3', '\x2', '\x2', '\x2', '\x19', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\a', '\x32', '\x2', '\x2', 
		'\x1C', '\x1D', '\a', '/', '\x2', '\x2', '\x1D', '\"', '\a', '\x32', '\x2', 
		'\x2', '\x1E', '\x1F', '\a', 'Q', '\x2', '\x2', '\x1F', ' ', '\a', '/', 
		'\x2', '\x2', ' ', '\"', '\a', 'Q', '\x2', '\x2', '!', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '!', '\x1E', '\x3', '\x2', '\x2', '\x2', '\"', '\x4', 
		'\x3', '\x2', '\x2', '\x2', '#', '$', '\a', '\x32', '\x2', '\x2', '$', 
		'%', '\a', '/', '\x2', '\x2', '%', '&', '\a', '\x32', '\x2', '\x2', '&', 
		'\'', '\a', '/', '\x2', '\x2', '\'', '.', '\a', '\x32', '\x2', '\x2', 
		'(', ')', '\a', 'Q', '\x2', '\x2', ')', '*', '\a', '/', '\x2', '\x2', 
		'*', '+', '\a', 'Q', '\x2', '\x2', '+', ',', '\a', '/', '\x2', '\x2', 
		',', '.', '\a', 'Q', '\x2', '\x2', '-', '#', '\x3', '\x2', '\x2', '\x2', 
		'-', '(', '\x3', '\x2', '\x2', '\x2', '.', '\x6', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x30', '\x4', '\x63', 'j', '\x2', '\x30', '\b', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\x32', '\x4', '\x33', ':', '\x2', '\x32', '\n', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\a', 'P', '\x2', '\x2', '\x34', 
		'\f', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\a', '\x44', '\x2', 
		'\x2', '\x36', '\xE', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\a', 
		'T', '\x2', '\x2', '\x38', '\x10', '\x3', '\x2', '\x2', '\x2', '\x39', 
		':', '\a', 'S', '\x2', '\x2', ':', '\x12', '\x3', '\x2', '\x2', '\x2', 
		';', '<', '\a', 'M', '\x2', '\x2', '<', '\x14', '\x3', '\x2', '\x2', '\x2', 
		'=', '>', '\a', 'z', '\x2', '\x2', '>', '\x16', '\x3', '\x2', '\x2', '\x2', 
		'?', '@', '\a', '-', '\x2', '\x2', '@', '\x18', '\x3', '\x2', '\x2', '\x2', 
		'\x41', '\x42', '\a', '%', '\x2', '\x2', '\x42', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', '\x5', '\x2', '!', '-', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace ChessBot.AlgebraicNotation
